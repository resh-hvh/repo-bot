from aiogram import Bot, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import Submission, User
from database.service import get_submission_by_index, get_total_submissions_count, get_user, get_submissions, get_total_submissions, async_session
from keyboards.pagination import PaginationKeyboard

router = Router()

class AddAdmin(StatesGroup):
    waiting_for_user_id = State()

async def edit_or_resend_message(
    bot: Bot,
    chat_id: int,
    message_id: int,
    submission: Submission,
    index: int,
    total: int
) -> int:
    keyboard = PaginationKeyboard(index, total).get_markup()
    
    try:
        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
        if not submission.media_data or not submission.media_data.get('file_id'):
            return await send_new_media(bot, chat_id, submission, keyboard)
            
        return await send_new_media(bot, chat_id, submission, keyboard)
        
    except Exception as e:
        error_msg = await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return error_msg.message_id
    
async def send_new_media(bot: Bot, chat_id: int, submission: Submission, keyboard) -> int:
    try:
        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ media_data
        media_data = submission.media_data or {}
        content_type = media_data.get('content_type')
        file_id = media_data.get('file_id')
        
        caption = f"#{submission.id}"
        if submission.content:
            caption += f"\n{submission.content}"

        match content_type:
            case 'photo':
                msg = await bot.send_photo(
                    chat_id=chat_id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=keyboard
                )
            case 'video':
                msg = await bot.send_video(
                    chat_id=chat_id,
                    video=file_id,
                    caption=caption,
                    reply_markup=keyboard
                )
            case 'voice':
                msg = await bot.send_voice(
                    chat_id=chat_id,
                    voice=file_id,
                    caption=caption,
                    reply_markup=keyboard
                )
            case 'video_note':
                msg = await bot.send_video_note(
                    chat_id=chat_id,
                    video_note=file_id
                )
                await bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    reply_markup=keyboard
                )
            case _:  # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                msg = await bot.send_message(
                    chat_id=chat_id,
                    text=caption,
                    reply_markup=keyboard
                )
        return msg.message_id
        
    except Exception as e:
        error_msg = await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return error_msg.message_id

async def download_and_send(bot: Bot, chat_id: int, submission: Submission, index: int, total: int):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è file_id
        if 'file_id' not in submission.media_data:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file_id –≤ –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã—Ö")
            
        keyboard = PaginationKeyboard(index, total).get_markup()
        file = await bot.get_file(submission.media_data['file_id'])
        video_data = await bot.download_file(file.file_path)
        
        msg = await bot.send_video(
            chat_id=chat_id,
            video=BufferedInputFile(video_data.read(), filename="video_note.mp4"),
            caption=f"üìπ –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ (#{submission.id})",
            reply_markup=keyboard
        )
        
        return [msg.message_id]
        
    except Exception as e:
        error_msg = await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        return [error_msg.message_id]


@router.message(Command("add"))
async def add_admin_start(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user = await get_user(message.from_user.id, session)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    
    if user.is_admin:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
        await state.set_state(AddAdmin.waiting_for_user_id)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@router.message(AddAdmin.waiting_for_user_id)
async def add_admin_finish(message: Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            user = await session.get(User, new_admin_id)
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                user = User(user_id=new_admin_id, is_admin=True)
                session.add(user)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.is_admin = True
                
            await session.commit()
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
    finally:
        await state.clear()
        
async def send_submission_message(bot: Bot, chat_id: int, submission: Submission, index: int, total: int, last_messages: list):
    keyboard = PaginationKeyboard(index, total).get_markup()
    content = submission.content or "üñºÔ∏è –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç"
    total = await get_total_submissions_count()

    for msg_id in last_messages:
        try:
            await bot.delete_message(chat_id, msg_id)
        except:
            pass

    messages = []
    

    try:
        if submission.media_data and submission.media_data.get('file_id'):
            match submission.content_type:
                case 'photo':
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=submission.media_data['file_id'],
                        caption=f"#{submission.id}\n{content}",
                        reply_markup=keyboard
                    )
                case 'video':
                    await bot.send_video(
                        chat_id=chat_id,
                        video=submission.media_data['file_id'],
                        caption=f"#{submission.id}\n{content}",
                        reply_markup=keyboard
                    )
                case 'voice':
                    await bot.send_voice(
                        chat_id=chat_id,
                        voice=submission.media_data['file_id'],
                        caption=f"#{submission.id}\n{content}",
                        reply_markup=keyboard
                    )
        else:
            msg = await bot.send_message(
                chat_id=chat_id,
                text=f"#{submission.id}\n{content}",
                reply_markup=keyboard
            )
            messages = [msg.message_id]
        return messages
    except Exception as e:
        await bot.send_message(
            chat_id=chat_id,
            text=f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è #{submission.id}:\n{str(e)}"
        )


@router.message(Command("moderate"))
async def start_moderation(message: Message, bot: Bot, state: FSMContext):
    total = await get_total_submissions_count()
    if total == 0:
        return await message.answer("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    submission = await get_submission_by_index(0)
    message_id = await send_new_media(bot, message.chat.id, submission, PaginationKeyboard(0, total).get_markup())
    
    await state.update_data(
        current_index=0,
        last_message_id=message_id
    )

@router.callback_query(F.data.startswith(("prev_", "next_")))
async def handle_pagination(callback: CallbackQuery, bot: Bot, state: FSMContext):
    try:
        data = await state.get_data()
        current_index = data.get("current_index", 0)
        total = await get_total_submissions_count()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        new_index = current_index - 1 if "prev" in callback.data else current_index + 1
        new_index = max(0, min(new_index, total - 1))
        
        submission = await get_submission_by_index(new_index)
        if not submission:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message_id = await edit_or_resend_message(
            bot=bot,
            chat_id=callback.message.chat.id,
            message_id=data["last_message_id"],
            submission=submission,
            index=new_index,
            total=total
        )
        
        await state.update_data(
            current_index=new_index,
            last_message_id=new_message_id
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# @router.callback_query(F.data.startswith(("prev_", "next_")))
# async def handle_pagination(callback: CallbackQuery, bot: Bot, state: FSMContext):
#     try:
#         action, index_str = callback.data.split("_")
#         current_index = int(index_str)
#         total = await get_total_submissions_count()

#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
#         if current_index < 0 or current_index >= total:
#             await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
#             return

#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#         data = await state.get_data()
#         last_messages = data.get("last_messages", [])

#         # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#         for msg_id in last_messages:
#             try:
#                 await bot.delete_message(callback.message.chat.id, msg_id)
#             except:
#                 pass

#         # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         submission = await get_submission_by_index(current_index)
#         if submission:
#             messages = await send_submission_message(bot, callback.message.chat.id, submission, current_index, total)
#             await state.update_data(last_messages=messages)
        
#         await callback.answer()
        
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")